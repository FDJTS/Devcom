/// Minimal schema to allow prisma generate during initial dependency install.
/// Full domain models will be added in the next step.

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Auth.js core user account
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  reactions     Reaction[]
  following     Follow[]   @relation("following")
  followers     Follow[]   @relation("followers")
  conversations ConversationMember[]
  messages      Message[]
  notifications Notification[]
  projectMembers ProjectMember[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  displayName String?
  username    String   @unique
  bio         String?
  location    String?
  websiteUrl  String?
  avatarUrl   String?
  languagesCsv String?  // comma-separated languages for SQLite fallback
  githubUrl   String?
  twitterUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id            String     @id @default(cuid())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  type          String     @default("ARTICLE") // ARTICLE | SNIPPET | PROJECT | STATUS
  title         String?
  slug          String?    @unique
  content       String
  excerpt       String?
  language      String?    // for snippets
  visibility    String     @default("public") // public | unlisted | private
  publishedAt   DateTime?  @default(now())
  updatedAt     DateTime   @updatedAt
  comments      Comment[]
  reactions     Reaction[]
  tags          PostTag[]
  // project membership if type=PROJECT
  projectMembers ProjectMember[]
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Reaction {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  postId    String
  post      Post         @relation(fields: [postId], references: [id])
  type      String       @default("LIKE") // LIKE | FIRE | CLAP | ROCKET
  createdAt DateTime     @default(now())

  @@unique([userId, postId, type])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("followers", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  posts     PostTag[]
  createdAt DateTime  @default(now())
}

model PostTag {
  postId String
  tagId  String
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Conversation {
  id        String               @id @default(cuid())
  isGroup   Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   ConversationMember[]
  messages  Message[]
}

model ConversationMember {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  role           String        @default("member")
  joinedAt       DateTime      @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  type           String       @default("TEXT") // TEXT | CODE | SYSTEM
  body           String
  createdAt      DateTime     @default(now())
  editedAt       DateTime?
  deletedAt      DateTime?
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  type      String            // NEW_COMMENT | NEW_REACTION | NEW_FOLLOWER | NEW_MESSAGE
  entityId  String?
  meta      String?           // JSON string placeholder
  readAt    DateTime?
  createdAt DateTime          @default(now())
}

model ProjectMember {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("contributor")
  addedAt   DateTime @default(now())

  @@unique([postId, userId])
}

// -------------------- Auth.js adapter models --------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
